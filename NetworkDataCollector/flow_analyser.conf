# -*- coding: utf-8 -*-
#
# !/usr/bin/env python3
#
# flow_analyser Sample Config File Copyright(c) 2018 Félix Molina.
#
# Many thanks to Télécom SudParis (http://www.telecom-sudparis.eu)
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# /!\ DO NOT REMOVE SECTION HEADERS /!\

# Using Windows(R) OS, double \ in path.
# E.g. C:\\Users\\user\\Documents\\

# It highly recommanded to use absolute path for files and directories

[GENERAL]
# It highly recommanded to use absolute path for files and directories

# Using Windows(R) OS, double \ in path.
# E.g. C:\\Users\\user\\Documents\\

# ModelFilePath: the file path of the model to use for prediction.
# The model must be a Keras-readable JSON file. For further information, see https://keras.io/models/about-keras-models/
# E.g. ModelPathFile = /home/user/Documents/mymodel.json

# Using Windows(R) OS, double \ in path.
# E.g. C:\\Users\\user\\Documents\\mymodel.json
ModelFilePath =

# WeightsFilePath: the file path of the weights computed during the model training.
# The weight file must be a Keras-readable H5 file. For further information,
# see https://keras.io/models/about-keras-models/
# See also https://keras.io/getting-started/faq/#how-can-i-install-hdf5-or-h5py-to-save-my-models-in-keras and
# https://www.h5py.org/
# E.g. WeightsPathFile = /home/user/Documents/myweights.h5

# Using Windows(R) OS, double \ in path.
# E.g. C:\\Users\\user\\Documents\\myweights.h5
WeightsFileWeightsFile =

# TrainingDatasetFilePath: the file path of the training dataset used to train the model.
# The training dataset must be a CSV file.
# E.g. TrainingDatasetFilePath = /home/user/Documents/mytrainingdataset.csv

# Using Windows(R) OS, double \ in path.
# E.g. C:\\Users\\user\\Documents\\mytrainingdataset.csv
TrainingDatasetFilePath =

# PredictionFilePath: the file path of the text file receiving the prediction results of the model.
# This file will be created if it does not exist. Prediction results will be append at the end of the file otherwise.
# E.g. PredictionFilePath = /home/user/Documents/prediction.dat

# Using Windows(R) OS, double \ in path.
# E.g. C:\\Users\\user\\Documents\\prediction.dat
PredictionFilePath =

[PREDICTION-HEADERS]
# List the categories recognized by the model.
# This list is an orderd list.
# E.g. If the model has two categories (anomaly and normal), list it like this:
# Anomaly
# Normal

Analysis
Backdoor
DoS
Exploits
Fuzzers
Generic
Normal
Reconnaissance
Shellcode
Worms

[FEATURES]
# List features in the same order they are excpected by the model.
# To access to the packet sizes of a flow, use the following patern with an underscore and the number of the targeted
# packet:
# packetsizes_X where X is the number of the packet which you want to get the size.
# X must be greather than 0.
# E.g. packetsizes_2 will return the second packet stored in the flow. If the packet does not exist, it will return 0.

# Follow the same procedure to get the time between two packet arrivals:
# deltatimebetweenpackets_Y where Y is the time between the arrival of the packet Y and the packet Y+1.
# Y must be greather than 0.
# E.g. deltatimebetweenpackets_3 will return the time between the arrival packet #3 and #4. If the packet #4 does not
# exist, it will return 0.

# packetsizes_2
# deltatimebetweenpackets_5
